Test casesTest functions:(display "Test for kt-depth-first when n = 3\n")(for ([i (in-range 0 3)])  (kt-depth-first (list (random 2) (random 2)) 3 100))(display "-----------------------------------------------\n")(display "Test for kt-best-first-hquad when n = 3\n")(for ([i (in-range 0 3)])  (kt-best-first-hquad (list (random 2) (random 2)) 3 100))(display "-----------------------------------------------\n")(display "Test for kt-best-first-h when n = 3\n")(for ([i (in-range 0 3)])  (kt-best-first-h (list (random 2) (random 2)) 3 100))Result:Test for kt-depth-first when n = 3No knight’s tour exists!No knight’s tour exists!No knight’s tour exists!-----------------------------------------------Test for kt-best-first-hquad when n = 3No knight’s tour exists!No knight’s tour exists!No knight’s tour exists!-----------------------------------------------Test for kt-best-first-h when n = 3Maximum trials reached!Maximum trials reached!Maximum trials reached!Test functions:(display "Test for kt-depth-first when n = 5\n")(for ([i (in-range 0 2)])  (kt-depth-first (list (random 4) (random 4)) 5 100))(display "-----------------------------------------------\n")(display "Test for kt-best-first-hquad when n = 5\n")(for ([i (in-range 0 2)])  (kt-best-first-hquad (list (random 4) (random 4)) 5 100))(display "-----------------------------------------------\n")(display "Test for kt-best-first-h when n = 5\n")(for ([i (in-range 0 2)])  (kt-best-first-h (list (random 2) (random 2)) 5 100))Result:Test for kt-depth-first when size is 5: ((25	14	1	8	23) (4	9	24	13	2) (15	18	3	22	7) (10	5	20	17	12) (19	16	11	6	21))Created node: 306775 ((1	14	19	8	25) (6	9	2	13	18) (15	20	7	24	3) (10	5	22	17	12) (21	16	11	4	23))Created node: 520016-----------------------------------------------Test for kt-best-first-hquad when n = 5((23	2	7	12	25) (8	13	24	1	6) (3	22	15	18	11) (14	9	20	5	16) (21	4	17	10	19))Created node: 273((25	16	11	6	23) (10	5	24	17	12) (15	18	1	22	7) (4	9	20	13	2) (19	14	3	8	21))Created node: 40-----------------------------------------------Test for kt-best-first-h when n = 5((25	16	11	6	23) (10	5	24	17	12) (15	18	1	22	7) (4	9	20	13	2) (19	14	3	8	21))Created node: 24786((23	4	15	10	25) (16	9	24	5	14) (3	22	13	18	11) (8	17	20	1	6) (21	2	7	12	19))Created node: 562718Test functions:(display "Test for kt-depth-first when n = 6\n")(for ([i (in-range 0 2)])  (kt-depth-first (list (random 2) (random 2)) 3 100))Result:Test for kt-depth-first when n = 6((17	14	33	26	23	12) (34	27	16	13	32	25) (15	18	5	24	11	22) (28	35	10	1	6	31) (19	4	29	8	21	2) (36	9	20	3	30	7))Created node: 19416810 ((7	22	13	30	33	36) (12	29	6	35	14	31) (21	8	23	32	5	34) (28	11	4	17	24	15) (1	20	9	26	3	18) (10	27	2	19	16	25))Created node: 95621863AnalysisFor every function, each node has 8 possible successors. Thus the time complexities are the same O(8n*n). However, in experiments, the last 2 functions are obviously more efficient than the first one without a heuristic function.For the second function with hquad calculation, the invalid points will get a negative answer after calculation. Then searching will start with the smallest one. According to the equation hquad =r((n−1)−r)+c((n−1)−c), the hquad is small when r and c  are close to n or 0. Therefore, the path is prior to the inner path or outer path. Whether exists a knight tour will be easier detected in limited possibilities.Warnsdorff’s rule will search the successor with smallest number of successors. According to Warnsdorff’s rule, the path will go through the outer line first. The method limits the path possibilities and it is easier to check if there exists a knight tour. 